{"version":3,"sources":["components/Order/Order.css","components/Order/Order.js","containers/Orders/Orders.js"],"names":["module","exports","Order","order","props","ingredients","ingredientName","push","name","amount","ingredientOutput","map","ig","react_default","a","createElement","style","textTransform","display","margin","border","padding","key","className","classes","price","toFixed","connect","state","orders","loading","token","auth","userId","dispatch","onFetchOrders","actions","withErrorHandler","useEffect","Spinner","length","Order_Order","id","axios"],"mappings":"6EACAA,EAAAC,QAAA,CAAkBC,MAAA,8HCqCHC,EAlCD,SAAAC,GACZ,IAAMC,EAAc,GACpB,IAAK,IAAIC,KAAkBF,EAAMC,YAC/BA,EAAYE,KAAK,CACfC,KAAMF,EACNG,OAAQL,EAAMC,YAAYC,KAG9B,IAAMI,EAAmBL,EAAYM,IAAI,SAAAC,GACvC,OACEC,EAAAC,EAAAC,cAAA,QACEC,MAAO,CACLC,cAAe,aACfC,QAAS,eACTC,OAAQ,QACRC,OAAQ,iBACRC,QAAS,OAEXC,IAAKV,EAAGJ,MAEPI,EAAGJ,KAVN,KAUcI,EAAGH,OAVjB,OAcJ,OACEI,EAAAC,EAAAC,cAAA,OAAKQ,UAAWC,IAAQtB,OACtBW,EAAAC,EAAAC,cAAA,wBAAgBL,GAChBG,EAAAC,EAAAC,cAAA,kBACQF,EAAAC,EAAAC,cAAA,mBAAWX,EAAMqB,MAAMC,QAAQ,IADvC,+BCiBSC,sBAfS,SAAAC,GACtB,MAAO,CACLC,OAAQD,EAAMzB,MAAM0B,OACpBC,QAASF,EAAMzB,MAAM2B,QACrBC,MAAOH,EAAMI,KAAKD,MAClBE,OAAQL,EAAMI,KAAKC,SAII,SAAAC,GACzB,MAAO,CACLC,cAAe,SAACJ,EAAOE,GAAR,OACbC,EAASE,IAAoBL,EAAOE,OAG3BN,CAGbU,YA1Ca,SAAAjC,GACbkC,oBAAU,WACRlC,EAAM+B,cAAc/B,EAAM2B,MAAO3B,EAAM6B,SACtC,IAEH,IAAIJ,EAAShB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,MAgBb,OAfKnC,EAAM0B,UAEPD,EADEzB,EAAMyB,OAAOW,QAAU,EAChBpC,EAAMyB,OAAOlB,IAAI,SAAAR,GACxB,OACEU,EAAAC,EAAAC,cAAC0B,EAAD,CACEnB,IAAKnB,EAAMuC,GACXrC,YAAaF,EAAME,YACnBoB,OAAQtB,EAAMsB,UAKXZ,EAAAC,EAAAC,cAAA,wCAGNF,EAAAC,EAAAC,cAAA,WAAMc,IAqBYc","file":"static/js/5.40452c55.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"Order__Order__W-Npf\"};","import React from \"react\";\r\n\r\nimport classes from \"./Order.css\";\r\n\r\nconst order = props => {\r\n  const ingredients = [];\r\n  for (let ingredientName in props.ingredients) {\r\n    ingredients.push({\r\n      name: ingredientName,\r\n      amount: props.ingredients[ingredientName]\r\n    });\r\n  }\r\n  const ingredientOutput = ingredients.map(ig => {\r\n    return (\r\n      <span\r\n        style={{\r\n          textTransform: \"capitalize\",\r\n          display: \"inline-block\",\r\n          margin: \"0 8px\",\r\n          border: \"1px solid #ccc\",\r\n          padding: \"5px\"\r\n        }}\r\n        key={ig.name}\r\n      >\r\n        {ig.name} ({ig.amount})\r\n      </span>\r\n    );\r\n  });\r\n  return (\r\n    <div className={classes.Order}>\r\n      <p>Ingredients:{ingredientOutput}</p>\r\n      <p>\r\n        Price:<strong>$ {props.price.toFixed(2)}</strong> Price (1)\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default order;\r\n","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport axios from \"../../axios-orders\";\r\nimport withErrorHandler from \"../../hoc/withErrorHandler/withErrorHandler\";\r\nimport Order from \"../../components/Order/Order\";\r\nimport * as actions from \"../../store/actions/index\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\n\r\nconst orders = props => {\r\n  useEffect(() => {\r\n    props.onFetchOrders(props.token, props.userId);\r\n  }, []);\r\n\r\n  let orders = <Spinner />;\r\n  if (!props.loading) {\r\n    if (props.orders.length >= 1) {\r\n      orders = props.orders.map(order => {\r\n        return (\r\n          <Order\r\n            key={order.id}\r\n            ingredients={order.ingredients}\r\n            price={+order.price}\r\n          />\r\n        );\r\n      });\r\n    } else {\r\n      orders = <h1>You don't have any orders</h1>;\r\n    }\r\n  }\r\n  return <div>{orders}</div>;\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    orders: state.order.orders,\r\n    loading: state.order.loading,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onFetchOrders: (token, userId) =>\r\n      dispatch(actions.fetchOrders(token, userId))\r\n  };\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withErrorHandler(orders, axios));\r\n"],"sourceRoot":""}